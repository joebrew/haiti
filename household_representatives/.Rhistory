plotdim<-par("pin")
xmult<-(xylim[2]-xylim[1])/(xylim[4]-xylim[3])*plotdim[2]/plotdim[1]
point.angles<-seq(0,7*pi/4,by=pi/4)+pi*rot/180
crspans<-rep(c(mheight*3,mheight/2),4)
xpoints<-cos(point.angles)*crspans*xmult+x
ypoints<-sin(point.angles)*crspans+y
polygon(xpoints,ypoints)
txtxpoints<-cos(point.angles[c(1,3,5,7)])*1.33*crspans[1]*xmult+x
txtypoints<-sin(point.angles[c(1,3,5,7)])*1.33*crspans[1]+y
text(txtxpoints,txtypoints,c("E","N","W","S"))
par(oldcex)
}
#####
# COLLAPSE MAP INTO ONLY OUTER BOUNDARY
#####
collapse_map <- function(x){
require(maptools)
boundary <- unionSpatialPolygons(x, rep(1, length(x@polygons)))
}
library(RColorBrewer)
library(classInt)
#####
# CHOROPLETH MAP
#####
choro <- function(
shape = NULL,
boundary = NULL,
main = NULL,
var = NULL,
color1 = "lightblue",
color2 = "darkorange",
legend_round = 2,
legend_pos = "bottomleft",
long_legend = TRUE,
fixed_scale = NULL,
lwd = 0.2,
border = TRUE){
my_colors <- colorRampPalette(c(color1, "white", color2))(10)
if(!is.null(fixed_scale)){
if(length(fixed_scale) != 10){stop("Fixed scale must be of length 10")}
my_quantiles <- fixed_scale
} else{
my_quantiles <- quantile(var, na.rm = TRUE, probs = seq(0,1, length = 10))
}
my_values <- vector(mode = "numeric", length = length(var))
for (i in 1:length(var)){
diffs <- (var[i] - as.numeric(my_quantiles))^2
best <- which.min(diffs)[1]
my_values[i] <- best
}
map_colors <- my_colors[my_values]
plot(shape, col = map_colors, border = border, lwd = lwd,
main = main)
plot(boundary, add = TRUE)
if(long_legend){
legend_colors <- colorRampPalette(my_colors)(25)
legend(legend_pos, # position
legend = c(min(round(my_quantiles, digits = legend_round)),
rep(NA, 11),
median(round(my_quantiles, digits = legend_round)),
rep(NA, 11),
max(round(my_quantiles, digits = legend_round))),
fill = legend_colors,
cex = 0.75,
y.intersp = 0.5,
border=NA,
bty = "n")
} else{
legend_colors <- colorRampPalette(my_colors)(11)
legend(legend_pos, # position
legend = c(min(round(my_quantiles, digits = legend_round)),
rep(NA, 4),
median(round(my_quantiles, digits = legend_round)),
rep(NA, 4),
max(round(my_quantiles, digits = legend_round))),
fill = legend_colors,
cex = 0.75,
y.intersp = 0.5,
border=NA,
bty = "n")
}
compassRose(x = -80.5 ,y = 30,rot=0,cex=0.25)
}
source_https("https://github.com/joebrew/misc/blob/master/functions/functions.R")
library(RCurl)
source_https <- function(u, unlink.tmp.certs = FALSE) {
#http://tonybreyal.wordpress.com/2011/11/24/source_https-sourcing-an-r-script-from-github/
# load package
require(RCurl)
# read script lines from website using a security certificate
if(!file.exists("cacert.pem")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile = "cacert.pem")
script <- getURL(u, followlocation = TRUE, cainfo = "cacert.pem")
if(unlink.tmp.certs) unlink("cacert.pem")
# parase lines and evealuate in the global environement
eval(parse(text = script), envir= .GlobalEnv)
}
source_https("https://raw.githubusercontent.com/joebrew/misc/master/functions/functions.R")
haiti1@data
library(dplyr)
?left_join
haiti1$departement <- haiti1$NAME_1
haiti1@data <- left_join(x = haiti1@data,
y = malaria,
by = "departement")
haiti1@data
choro
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria)
pop <- readOGR("/home/joebrew/Documents/haiti/malaria/map/Haiti_ADM3_stats")
library(rgdal)
pop <- readOGR("/home/joebrew/Documents/haiti/malaria/map/Haiti_ADM3_stats")
pop <- readOGR("/home/joebrew/Documents/haiti/malaria/map/Haiti_ADM3_stats")
pop <- readOGR("/home/joebrew/Documents/haiti/malaria/map", "Haiti_ADM3_stats")
plot(pop)
names(pop@data)
head(pop@data)
?by
by(pop@data,
pop@data$DEPARTEMEN,
sum(pop@data$POPULATION))
by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(pop@data$POPULATION[which(pop@data$DEPARTEMEN == x)], na.rm = T))
pop$POPULATION
by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(pop@data$POPULATION, na.rm = T))
by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum("POPULATION", na.rm = T))
by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(x["POPULATION"], na.rm = T))
as.numeric(by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(x["POPULATION"], na.rm = T)))
malaria$population <-
as.numeric(by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(x["POPULATION"], na.rm = T)))
# from
# http://www.mspp.gouv.ht/site/downloads/Rapport%20Statistique%20MSPP%202013.pdf
malaria <- data.frame("departement" = c("L'Artibonite",
"Centre",
"Grand'Anse",
"Nippes",
"Nord",
"Nord-Est",
"Nord-Ouest",
"Ouest",
"Sud",
"Sud-Est"),
"malaria" = c(921,
132,
500,
426,
661,
419,
167,
1201,
354,
202),
"population" = c(1299398,
581505,
626928,
NA,
823043,
309918,
531198,
3096967,
621651,
484675))
library(dplyr)
haiti1$departement <- haiti1$NAME_1
haiti1@data <- left_join(x = haiti1@data,
y = malaria,
by = "departement")
# Plot
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria)
# Get haitian population density map
library(rgdal)
pop <- readOGR("/home/joebrew/Documents/haiti/malaria/map", "Haiti_ADM3_stats")
# Get population density by department
by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(x["POPULATION"], na.rm = T))
library(RCurl)
source_https <- function(u, unlink.tmp.certs = FALSE) {
#http://tonybreyal.wordpress.com/2011/11/24/source_https-sourcing-an-r-script-from-github/
# load package
require(RCurl)
# read script lines from website using a security certificate
if(!file.exists("cacert.pem")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile = "cacert.pem")
script <- getURL(u, followlocation = TRUE, cainfo = "cacert.pem")
if(unlink.tmp.certs) unlink("cacert.pem")
# parase lines and evealuate in the global environement
eval(parse(text = script), envir= .GlobalEnv)
}
# source gadm function
source_https("https://raw.githubusercontent.com/joebrew/maps/master/gadm_function.R")
# source choro function
source_https("https://raw.githubusercontent.com/joebrew/misc/master/functions/functions.R")
gadm("haiti", 1)
haiti1$NAME_1
# Manually compile malaria dataframe
# from
# http://www.mspp.gouv.ht/site/downloads/Rapport%20Statistique%20MSPP%202013.pdf
malaria <- data.frame("departement" = c("L'Artibonite",
"Centre",
"Grand'Anse",
"Nippes",
"Nord",
"Nord-Est",
"Nord-Ouest",
"Ouest",
"Sud",
"Sud-Est"),
"malaria" = c(921,
132,
500,
426,
661,
419,
167,
1201,
354,
202),
"population" = c(1299398, # got this from the below shapefile
581505,
626928,
NA,
823043,
309918,
531198,
3096967,
621651,
484675))
# Merge malaria data to haiti1
library(dplyr)
haiti1$departement <- haiti1$NAME_1
haiti1@data <- left_join(x = haiti1@data,
y = malaria,
by = "departement")
# Plot
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria)
# Get haitian population density map
library(rgdal)
pop <- readOGR("/home/joebrew/Documents/haiti/malaria/map", "Haiti_ADM3_stats")
# Get population density by department
by(pop@data,
pop@data$DEPARTEMEN,
function(x) sum(x["POPULATION"], na.rm = T))
# add population density to malaria data
choro
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = 0)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = 4)
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2)
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2,
main = "Cas de paludisme par département")
title(main = "Cas de paludisme par département")
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = -2)
title(main = "Cas de paludisme par département (par 1000 résidents)")
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 4)
title(main = "Cas de paludisme par département (par 1000 résidents)")
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 2)
title(main = "Cas de paludisme par département (par 1000 résidents)")
par(mfrow = c(1,2))
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2)
title(main = "Cas de paludisme par département")
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 2)
title(main = "Cas de paludisme par département (par 1000 résidents)")
choro
# Plot
par(mfrow = c(1,2))
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2,
legend_pos = "right")
title(main = "Cas de paludisme par département")
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 1,
legend_pos = "right")
title(main = "Cas de paludisme par département (par 1000 résidents)")
par(mfrow = c(1,2))
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2,
legend_pos = "topleft")
title(main = "Cas de paludisme par département")
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 1,
legend_pos = "topleft")
title(main = "Cas de paludisme par département (par 1000 résidents)")
title(sub "Carte préparée par Joe Brew", outer = TRUE)
title(sub="Carte préparée par Joe Brew", outer = TRUE)
title(sub="Carte préparée par Joe Brew")
?title
title(sub="Carte préparée par Joe Brew")
par(mfrow = c(1,2))
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2,
legend_pos = "topleft")
title(main = "Cas de paludisme par département",
cex.main = 0.75)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 1,
legend_pos = "topleft")
title(main = "Cas de paludisme par département (par 1000 résidents)",
cex.main = 0.75)
title(sub="Carte préparée par Joe Brew",
cex.sub = 0.6)
# Plot
par(mfrow = c(1,2))
par(mar = c(1,3,1,1))
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2,
legend_pos = "topleft")
title(main = "Cas de paludisme par département",
cex.main = 0.75)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 1,
legend_pos = "topleft")
title(main = "Cas de paludisme par département (par 1000 résidents)",
cex.main = 0.75)
title(sub="Cartes préparées par Joe Brew",
cex.sub = 0.6)
title(sub="Cartes préparées par Joe Brew",
cex.sub = 0.6,
line = 2)
title(sub="Cartes préparées par Joe Brew",
cex.sub = 0.6,
line = 5)
title(sub="Cartes préparées par Joe Brew",
cex.sub = 0.6,
line = -5)
par(mfrow = c(1,2))
par(mar = c(1,3,1,1))
haiti_boundary <- collapse_map(haiti1)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria,
legend_round = -2,
legend_pos = "topleft")
title(main = "Cas de paludisme par département",
cex.main = 0.75)
choro(shape = haiti1,
boundary = haiti_boundary,
var = haiti1$malaria / haiti1$population * 1000,
legend_round = 1,
legend_pos = "topleft")
title(main = "Cas de paludisme par département (par 1000 résidents)",
cex.main = 0.75)
title(sub="Cartes préparées par Joe Brew",
cex.sub = 0.6,
line = -5)
install.packages("sendmailR")
library(sendmailR)
sendmail(from = "<joebrew@gmail.com>",
to = "<joebrew@gmail.com>",
subject = "Test email",
msg = "Testing testing")
Sys.info()[4]
load("/media/joebrew/JB/fdoh/private/acps/complete/complete3.Rdata")
head(dat)
#####
# SET WORKING DIRECTORY CONDITIONAL TO SYSTEM
#####
if ( Sys.info()["sysname"] == "Linux" ){
wd <- "/home/joebrew/Documents/haiti/household_representatives"
} else {
wd <- "C:/Users/BrewJR/Documents/haiti/household_representatives"
}
setwd(private)
setwd(wd)
dir
dir()
hh <- read.csv("spreadsheet_for_krishna.csv")
hh <- read.csv(paste0(wd, "spreadsheet_for_krishna.csv"))
hh <- read.csv(paste0(wd, "/spreadsheet_for_krishna.csv"))
#####
if ( Sys.info()["sysname"] == "Linux" ){
wd <- "/home/joebrew/Documents/haiti/household_representatives"
} else {
wd <- "C:/Users/BrewJR/Documents/haiti/household_representatives"
}
#####
# READ IN RANDOMLY GENERATED HOUSEHOLD REPS SPREADSHEET
#####
hh <- read.csv(paste0(wd, "/spreadsheet_for_krishna.csv"))
#####
if ( Sys.info()["sysname"] == "Linux" ){
wd <- "/home/joebrew/Documents/haiti/household_representatives"
} else {
wd <- "C:/Users/BrewJR/Documents/haiti/household_representatives"
}
#####
# READ IN RANDOMLY GENERATED HOUSEHOLD REPS SPREADSHEET
#####
hh <- read.csv(paste0(wd, "/spreadsheet_for_krishna.csv"))
head(hh)
TableFun <- function(hh_number){
x <- hh[hh_number,]
names(x) <- c("Household size:",
1: 7)
row.names(x) <- paste0("Household number: ", hh_number)
x <- x[,1] # remove column with household number (now obsolete)
return(x)
}
TableFun(35)
TableFun <- function(hh_number){
x <- hh[hh_number,]
names(x) <- c("Household size:",
1: 7)
row.names(x) <- paste0("Household number: ", hh_number)
#x <- x[,1] # remove column with household number (now obsolete)
return(x)
}
TableFun(35)
TableFun <- function(hh_number){
x <- hh[hh_number,]
names(x) <- c("Household size:",
1: 7)
#row.names(x) <- paste0("Household number: ", hh_number)
#x <- x[,1] # remove column with household number (now obsolete)
return(x)
}
TableFun(35)
TableFun <- function(hh_number){
x <- hh[hh_number,]
names(x) <- c("Household size:",
1: 7)
#row.names(x) <- paste0("Household number: ", hh_number)
row.names(x) <- NULL
return(x)
}
TableFun(35)
TableFun <- function(hh_number){
x <- hh[hh_number,]
names(x) <- c("Household size:",
1: 7)
x[,1] <- paste0("Household number: ", x[,1])
#row.names(x) <- paste0("Household number: ", hh_number)
row.names(x) <- NULL
return(x)
}
TableFun(35)
TableFun <- function(hh_number){
x <- hh[hh_number,]
names(x) <- c("Household size:",
1: 7)
x[,1] <- paste0("HH number: ", x[,1], " || Representative: ")
#row.names(x) <- paste0("Household number: ", hh_number)
row.names(x) <- NULL
return(x)
}
TableFun(35)
